@model ExamSchedule.Models.Exam

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit</h1>

<h4>Exam</h4>
<hr />
<div class="row">
    <div class="col-6">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CourseId" />
            <input type="hidden" asp-for="ScheduleId" />
            <input type="hidden" asp-for="MergerExamId" />
            <input type="hidden" asp-for="IsMerged" />
            <input type="hidden" asp-for="IsPined" />

            <div class="form-group">
                <label asp-for="ScheduleId" class="control-label"></label>
                <input class="form-control" type="text" value="@Model.Schedule.Title" disabled />
                <span asp-validation-for="ScheduleId" class="text-danger"></span>
            </div>
            <div class="form-group ">
                <label asp-for="CourseId" class="control-label"></label>
                <div class="row">
                    <div class="col-8">
                        <input class="form-control" type="text" value="@Model.Course.CourseFullName" disabled />
                    </div>
                    <div class="col-4">
                        @if (Model.IsMergedParsed && Model.MergerExamId != Model.Id)
                        {
                            @Html.ActionLink("Çatı derse git","Edit",new {id=Model.MergerExamId})
                        }
                    </div>
                </div>
                <span asp-validation-for="CourseId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="IsMerged" class="control-label"></label>
                <input asp-for="IsMergedParsed" type="checkbox" class="form-control-lg form-check-input" />
                <span asp-validation-for="IsMergedParsed" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="IsPined" class="control-label"></label>
                @{
                    if (Model.IsMergedParsed && Model.MergerExamId != Model.Id)
                    {
                        <input asp-for="IsPinnedParsed" disabled class="form-control-lg form-check-input" />
                    }
                    else
                    {
                        <input asp-for="IsPinnedParsed" class="form-control-lg form-check-input" />
                    }
                }

                <span asp-validation-for="IsPined" class="text-danger"></span>
            </div>
            <div id="divDataPinned">

                <div class="row">
                    <div class="col-5">
                        <div class="form-group">
                            <label asp-for="Date" class="control-label"></label>
                            <input asp-for="Date" class="form-control" />
                            <span asp-validation-for="Date" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-4">
                        <div class="form-group">
                            <label asp-for="StartHour" class="control-label"></label>
                            <input asp-for="StartHour" class="form-control" />
                            <span asp-validation-for="StartHour" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="form-group">
                            <label asp-for="StartMinute" class="control-label"></label>
                            <input asp-for="StartMinute" class="form-control" />
                            <span asp-validation-for="StartMinute" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-4">
                        <div class="form-group">
                            <label asp-for="Duration" class="control-label"></label>
                            <input asp-for="Duration" class="form-control" />
                            <span asp-validation-for="Duration" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="form-group">
                            <label asp-for="BeforeSpace" class="control-label"></label>
                            <input asp-for="BeforeSpace" class="form-control" />
                            <span asp-validation-for="BeforeSpace" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-4">
                        <div class="form-group">
                            <label asp-for="AfterSpace" class="control-label"></label>
                            <input asp-for="AfterSpace" class="form-control" />
                            <span asp-validation-for="AfterSpace" class="text-danger"></span>
                        </div>
                    </div>


                </div>
                <div class="row"></div>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            $("#divDataPinned").hide();
        @if (Model.IsPinnedParsed)
        {
            @:$("#divDataPinned").show();

        }

                $("#IsPinnedParsed").on("change", function () {
                    //log($(this).is(":checked"));
                    if ($(this).is(":checked")) {
                        $("#divDataPinned").show();
                        $("#IsPined").val("True")
                    } else {
                        $("#divDataPinned").hide();
                        $("#IsPined").val("False");
                    }
                });

            $("#IsMergedParsed").on("change", function () {
                //log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    $("#IsMerged").val("True")
                } else {
                    $("#IsMerged").val("False");
                }
            });
            log("@Model.Schedule.EndDateParsed.ToLongDateString()");
            $("#Date").datepicker({
                minDate: new Date(@Model.Schedule.StartDateParsed.Year, @Model.Schedule.StartDateParsed.Month-1, @Model.Schedule.StartDateParsed.Day),
                maxDate: new Date(@Model.Schedule.EndDateParsed.Year, @Model.Schedule.EndDateParsed.Month-1, @Model.Schedule.EndDateParsed.Day),
                dateFormat:"dd/mm/yy"
            });

        });


    </script>
}
